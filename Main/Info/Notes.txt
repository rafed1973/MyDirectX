Work Flow
======================================================================================
1.	Include the direct x dependencies in one .h file.
2.	Make sure you can declare com pointers in an easy way.
	MS way is not preferred. This was done using third party .h file 
	to declare com pointers.
3.	Get the debug layer setup in separate .h and .cpp files
4.	Create the device.
5.	Declare command queue descriptor (needed to create command queue)
	and setup its attributes.
6.	Create command queue.
7. Created a fence and fence value
8. Created a method for the command queue to wait if the fence have not
	the (desired value) created a windows event and waited for it to trigger
9. Created a command list which is like fornt end and created command list allocator
	Command Allocator does not cleared until the list is done with by the GPU
10. Creating a window since we are ready to populate the command list
11. Create a window class then create a window to draw on
12. Attach the window to swapchain. The creation of swap chaing is done after the window creation
	in this example it is in window init. To create swap chain we need dxgi factory which is responsible
	for accessing several dxgi features. we did not need it before this step.
	Swap chaing is created using the factory and not the device
13. Handle swap buffer flushing and resizing
14. Understanding buffers inside the swap chain which is just a concept to communicate with the screen
	you can not draw on the swap chain you need a buffer
15. an ID3 12 resource is any thing that might live on the GPU
16. a buffer in the swap chain is 2D texture
17. There are steps to prepare the buffers so we can put them on the screen
18. resource state is to tell GPU how is the block of memorey (Resource) is used
19. All state changes done through memory barriers
20. Note command lists execute on the driver and not the GPU. The driver goes to the GPU if there is a need.



